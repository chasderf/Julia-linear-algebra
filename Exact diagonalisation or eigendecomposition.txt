julia> using LinearAlgebra

julia> N = 100
100

julia> T = 1
1

julia> μ = -0.5
-0.5

julia>  H = diagm(0 => fill(μ, N), 1 => fill(-T, N-1), -1 => fill(-T, N-1))
100×100 Matrix{Float64}:
 -0.5  -1.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 -1.0  -0.5  -1.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0  -1.0  -0.5  -1.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0  -1.0  -0.5  -1.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0  -1.0  -0.5  -1.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0  -1.0  -0.5  -1.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0  -1.0  -0.5      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0  -1.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  ⋮                             ⋮          ⋱         ⋮
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0     -1.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0     -0.5  -1.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …  -1.0  -0.5  -1.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0  -1.0  -0.5  -1.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0  -1.0  -0.5  -1.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0  -1.0  -0.5  -1.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0  -1.0  -0.5

julia>  ψ = normalize(rand(N));

julia> ev(H, ψ) = ψ'*H*ψ # \phi
ev (generic function with 1 method)

julia>  ev(H, ψ) = ψ'*H*ψ $ϕ|H|ϕ>
              ev(H, ψ)
ev (generic function with 1 method)

julia> typeof(H)
Matrix{Float64} (alias for Array{Float64, 2})

julia> using SparseArrays

julia> Hsparse = sparse(H)
100×100 SparseMatrixCSC{Float64, Int64} with 298 stored entries:
⎡⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎤
⎢⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⎥
⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⎥
⎣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⎦

julia>  Htri = Tridiagonal(H)
100×100 Tridiagonal{Float64, Vector{Float64}}:
 -0.5  -1.0    ⋅     ⋅     ⋅     ⋅     ⋅   …    ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
 -1.0  -0.5  -1.0    ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅   -1.0  -0.5  -1.0    ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅   -1.0  -0.5  -1.0    ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅   -1.0  -0.5  -1.0    ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅   -1.0  -0.5  -1.0  …    ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅   -1.0  -0.5       ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅   -1.0       ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅   …    ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
  ⋮                             ⋮          ⋱         ⋮
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅   …    ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅      -1.0    ⋅     ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅      -0.5  -1.0    ⋅     ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅   …  -1.0  -0.5  -1.0    ⋅     ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅   -1.0  -0.5  -1.0    ⋅     ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅   -1.0  -0.5  -1.0    ⋅
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅   -1.0  -0.5  -1.0
   ⋅     ⋅     ⋅     ⋅     ⋅     ⋅     ⋅        ⋅     ⋅     ⋅     ⋅   -1.0  -0.5

julia> vals, vecs = eigen(H)
Eigen{Float64, Float64, Matrix{Float64}, Vector{Float64}}
values:
100-element Vector{Float64}:
 -2.4990325645839753
 -2.4961311942671887
 -2.4912986959380365
 -2.484539744726553
 -2.475860879481513
 -2.4652704964445267
 -2.4527788411272136
 -2.438397998399332
 -2.422141880797449
 -2.4040262150654583
 -2.384068526939977
 -2.3622881241953175
 -2.3387060779644715
  ⋮
  1.362288124195319
  1.3840685269399784
  1.4040262150654599
  1.422141880797449
  1.4383979983993322
  1.452778841127214
  1.4652704964445273
  1.4758608794815133
  1.484539744726553
  1.4912986959380372
  1.4961311942671887
  1.4990325645839762
vectors:
100×100 Matrix{Float64}:
 0.00437636  -0.00874848  0.0131121  …   0.0131121   0.00874848  -0.00437636
 0.00874848  -0.0174631   0.0261102     -0.0261102  -0.0174631    0.00874848
 0.0131121   -0.0261102   0.038881       0.038881    0.0261102   -0.0131121
 0.0174631   -0.0346562   0.0513136     -0.0513136  -0.0346562    0.0174631
 0.0217972   -0.0430682   0.0632996      0.0632996   0.0430682   -0.0217972
 0.0261102   -0.0513136   0.0747349  …  -0.0747349  -0.0513136    0.0261102
 0.0303979   -0.0593604   0.0855198      0.0855198   0.0593604   -0.0303979
 0.0346562   -0.0671776   0.0955607     -0.0955607  -0.0671776    0.0346562
 0.038881    -0.0747349   0.10477        0.10477     0.0747349   -0.038881
 0.0430682   -0.082003    0.113068      -0.113068   -0.082003     0.0430682
 0.0472137   -0.0889539   0.120382   …   0.120382    0.0889539   -0.0472137
 0.0513136   -0.0955607   0.126648      -0.126648   -0.0955607    0.0513136
 0.0553638   -0.101798    0.131812       0.131812    0.101798    -0.0553638
 ⋮                                   ⋱
 0.0513136    0.0955607   0.126648       0.126648   -0.0955607   -0.0513136
 0.0472137    0.0889539   0.120382      -0.120382    0.0889539    0.0472137
 0.0430682    0.082003    0.113068   …   0.113068   -0.082003    -0.0430682
 0.038881     0.0747349   0.10477       -0.10477     0.0747349    0.038881
 0.0346562    0.0671776   0.0955607      0.0955607  -0.0671776   -0.0346562
 0.0303979    0.0593604   0.0855198     -0.0855198   0.0593604    0.0303979
 0.0261102    0.0513136   0.0747349      0.0747349  -0.0513136   -0.0261102
 0.0217972    0.0430682   0.0632996  …  -0.0632996   0.0430682    0.0217972
 0.0174631    0.0346562   0.0513136      0.0513136  -0.0346562   -0.0174631
 0.0131121    0.0261102   0.038881      -0.038881    0.0261102    0.0131121
 0.00874848   0.0174631   0.0261102      0.0261102  -0.0174631   -0.00874848
 0.00437636   0.00874848  0.0131121     -0.0131121   0.00874848   0.00437636

julia> ψ0 = vecs [:,1}
ERROR: syntax: space before "[" not allowed in "vecs [" at REPL[14]:1
Stacktrace:
 [1] top-level scope
   @ none:1

julia> ψ0 = vecs [:,1]
ERROR: syntax: space before "[" not allowed in "vecs [" at REPL[15]:1
Stacktrace:
 [1] top-level scope
   @ none:1

julia> ψ0 = vecs[:,1]
100-element Vector{Float64}:
 0.004376357346900525
 0.008748480850710498
 0.013112140764309128
 0.017463115528552488
 0.02179719585635938
 0.026110188804924692
 0.030397921832121047
 0.03465624683316357
 0.03888104415363324
 0.04306822657497679
 0.04721374326862623
 0.05131358371491453
 0.055363781582994064
 ⋮
 0.05131358371495845
 0.04721374326866721
 0.04306822657501444
 0.03888104415366729
 0.03465624683319377
 0.03039792183214743
 0.026110188804947167
 0.02179719585637802
 0.017463115528567313
 0.013112140764320258
 0.008748480850717935
 0.0043763573469042276

julia> ev(H, ψ0)
ERROR: UndefVarError: `$` not defined
Stacktrace:
 [1] ev(H::Matrix{Float64}, ψ::Vector{Float64})
   @ Main .\REPL[8]:1
 [2] top-level scope
   @ REPL[17]:1

julia> ev(H, ψ0) <=ev(H, ψ)
ERROR: UndefVarError: `$` not defined
Stacktrace:
 [1] ev(H::Matrix{Float64}, ψ::Vector{Float64})
   @ Main .\REPL[8]:1
 [2] top-level scope
   @ REPL[18]:1

julia> ev(H, ψ0) <= ev(H, ψ)
ERROR: UndefVarError: `$` not defined
Stacktrace:
 [1] ev(H::Matrix{Float64}, ψ::Vector{Float64})
   @ Main .\REPL[8]:1
 [2] top-level scope
   @ REPL[19]:1

julia> using Plots
 │ Attempted to find missing packages in package registries but no registries are installed.
 └ Use package mode to install a registry. `pkg> registry add` will install the default registries.

ERROR: ArgumentError: Package Plots not found in current path.
- Run `import Pkg; Pkg.add("Plots")` to install the Plots package.
Stacktrace:
 [1] macro expansion
   @ .\loading.jl:1630 [inlined]
 [2] macro expansion
   @ .\lock.jl:267 [inlined]
 [3] require(into::Module, mod::Symbol)
   @ Base .\loading.jl:1611

julia> using Plots                                                                             show_n_states = 3
ERROR: syntax: extra token "show_n_states" after end of expression
Stacktrace:
 [1] top-level scope
   @ none:1

julia> eigen(Htri)
Eigen{Float64, Float64, Matrix{Float64}, Vector{Float64}}
values:
100-element Vector{Float64}:
 -2.4990325645839753
 -2.4961311942671887
 -2.4912986959380365
 -2.484539744726553
 -2.475860879481513
 -2.4652704964445267
 -2.4527788411272136
 -2.438397998399332
 -2.422141880797449
 -2.4040262150654583
 -2.384068526939977
 -2.3622881241953175
 -2.3387060779644715
  ⋮
  1.362288124195319
  1.3840685269399784
  1.4040262150654599
  1.422141880797449
  1.4383979983993322
  1.452778841127214
  1.4652704964445273
  1.4758608794815133
  1.484539744726553
  1.4912986959380372
  1.4961311942671887
  1.4990325645839762
vectors:
100×100 Matrix{Float64}:
 0.00437636  -0.00874848  0.0131121  …   0.0131121   0.00874848  -0.00437636
 0.00874848  -0.0174631   0.0261102     -0.0261102  -0.0174631    0.00874848
 0.0131121   -0.0261102   0.038881       0.038881    0.0261102   -0.0131121
 0.0174631   -0.0346562   0.0513136     -0.0513136  -0.0346562    0.0174631
 0.0217972   -0.0430682   0.0632996      0.0632996   0.0430682   -0.0217972
 0.0261102   -0.0513136   0.0747349  …  -0.0747349  -0.0513136    0.0261102
 0.0303979   -0.0593604   0.0855198      0.0855198   0.0593604   -0.0303979
 0.0346562   -0.0671776   0.0955607     -0.0955607  -0.0671776    0.0346562
 0.038881    -0.0747349   0.10477        0.10477     0.0747349   -0.038881
 0.0430682   -0.082003    0.113068      -0.113068   -0.082003     0.0430682
 0.0472137   -0.0889539   0.120382   …   0.120382    0.0889539   -0.0472137
 0.0513136   -0.0955607   0.126648      -0.126648   -0.0955607    0.0513136
 0.0553638   -0.101798    0.131812       0.131812    0.101798    -0.0553638
 ⋮                                   ⋱
 0.0513136    0.0955607   0.126648       0.126648   -0.0955607   -0.0513136
 0.0472137    0.0889539   0.120382      -0.120382    0.0889539    0.0472137
 0.0430682    0.082003    0.113068   …   0.113068   -0.082003    -0.0430682
 0.038881     0.0747349   0.10477       -0.10477     0.0747349    0.038881
 0.0346562    0.0671776   0.0955607      0.0955607  -0.0671776   -0.0346562
 0.0303979    0.0593604   0.0855198     -0.0855198   0.0593604    0.0303979
 0.0261102    0.0513136   0.0747349      0.0747349  -0.0513136   -0.0261102
 0.0217972    0.0430682   0.0632996  …  -0.0632996   0.0430682    0.0217972
 0.0174631    0.0346562   0.0513136      0.0513136  -0.0346562   -0.0174631
 0.0131121    0.0261102   0.038881      -0.038881    0.0261102    0.0131121
 0.00874848   0.0174631   0.0261102      0.0261102  -0.0174631   -0.00874848
 0.00437636   0.00874848  0.0131121     -0.0131121   0.00874848   0.00437636

julia> Hbig = big.(H)
100×100 Matrix{BigFloat}:
 -0.5  -1.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 -1.0  -0.5  -1.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0  -1.0  -0.5  -1.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0  -1.0  -0.5  -1.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0  -1.0  -0.5  -1.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0  -1.0  -0.5  -1.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0  -1.0  -0.5      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0  -1.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  ⋮                             ⋮          ⋱         ⋮
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0     -1.0   0.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0     -0.5  -1.0   0.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0  …  -1.0  -0.5  -1.0   0.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0  -1.0  -0.5  -1.0   0.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0  -1.0  -0.5  -1.0   0.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0  -1.0  -0.5  -1.0
  0.0   0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0  -1.0  -0.5

julia> eigen(Hermitian(Hbig));
ERROR: MethodError: no method matching eigen!(::Hermitian{BigFloat, Matrix{BigFloat}}; sortby::Nothing)

Closest candidates are:
  eigen!(::Union{Hermitian{T, var"#s969"}, Hermitian{Complex{T}, var"#s969"}, Symmetric{T, var"#s969"}} where var"#s969"<:(StridedMatrix{T} where T), ::AbstractMatrix{T}; sortby) where T<:Number
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:167
  eigen!(::StridedMatrix{T}; permute, scale, sortby) where T<:Union{Float32, Float64}
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\eigen.jl:149
  eigen!(::StridedMatrix{T}; permute, scale, sortby) where T<:Union{ComplexF32, ComplexF64}
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\eigen.jl:172
  ...

Stacktrace:
 [1] eigen(A::Hermitian{BigFloat, Matrix{BigFloat}}; sortby::Nothing)
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:13
 [2] eigen(A::Hermitian{BigFloat, Matrix{BigFloat}})
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:11
 [3] top-level scope
   @ REPL[24]:1

julia> using GenericLinearAlgebra
ERROR: ArgumentError: Package GenericLinearAlgebra not found in current path.
- Run `import Pkg; Pkg.add("GenericLinearAlgebra")` to install the GenericLinearAlgebra package.
Stacktrace:
 [1] macro expansion
   @ .\loading.jl:1630 [inlined]
 [2] macro expansion
   @ .\lock.jl:267 [inlined]
 [3] require(into::Module, mod::Symbol)
   @ Base .\loading.jl:1611

julia> eigen(Hermitian(Hbig));
ERROR: MethodError: no method matching eigen!(::Hermitian{BigFloat, Matrix{BigFloat}}; sortby::Nothing)

Closest candidates are:
  eigen!(::Union{Hermitian{T, var"#s969"}, Hermitian{Complex{T}, var"#s969"}, Symmetric{T, var"#s969"}} where var"#s969"<:(StridedMatrix{T} where T), ::AbstractMatrix{T}; sortby) where T<:Number
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:167
  eigen!(::StridedMatrix{T}; permute, scale, sortby) where T<:Union{Float32, Float64}
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\eigen.jl:149
  eigen!(::StridedMatrix{T}; permute, scale, sortby) where T<:Union{ComplexF32, ComplexF64}
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\eigen.jl:172
  ...

Stacktrace:
 [1] eigen(A::Hermitian{BigFloat, Matrix{BigFloat}}; sortby::Nothing)
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:13
 [2] eigen(A::Hermitian{BigFloat, Matrix{BigFloat}})
   @ LinearAlgebra C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\LinearAlgebra\src\symmetriceigen.jl:11
 [3] top-level scope
   @ REPL[26]:1

julia> eigen(Hsparse)
ERROR: eigen(A) not supported for sparse matrices. Use for example eigs(A) from the Arpack package instead.
Stacktrace:
 [1] error(s::String)
   @ Base .\error.jl:35
 [2] eigen(A::SparseMatrixCSC{Float64, Int64})
   @ SparseArrays C:\Users\Charlie\AppData\Local\Programs\Julia-1.9.3\share\julia\stdlib\v1.9\SparseArrays\src\linalg.jl:1660
 [3] top-level scope
   @ REPL[27]:1

julia>